Первоначальная настройка gitbash:
ввод своих данных:
git config --global user.name "Anna Goreva"
git config --global user.email "annaelkalj@gmail.com"
Посмотреть каталог куда автоматически будут сохранятся файлы 
pwd
появиться каталог: /c/Users/Admin
Инициализация
git init
появится фраза: Initialized empty Git repository in C:/Users/Admin/.git/

Первое ДЗ
1) Посмотреть где я - pwd
$ pwd
/c/Users/Admin

2) Создать папку - mkdir Название папки
$ mkdir 111

3) Зайти в папку - cd Название папки или cd !$ — Перейти в только что созданную папку
$ cd 111 или $ cd !$

4) Создать 3 папки - mkdir -p название папки1 название папки2 название папки3 
используем только пробелы без запятой
$ mkdir -p 222 333 444

5) Зайти в любую папку - cd путь_до_нужной папки или название папки если вы находитесь в той же ветке, что и папка
$ cd /c/Users/Admin или $ cd 222
6) Создать 5 файлов (3 txt, 2 json) - touch название.файла
$ touch 1.txt 2.txt 3.txt 4.json 5.json

7) Создать 3 вложенные папки mkdir -p первая/вторая/третья
$ mkdir -p 555/666/777

8. Вывести список содержимого папки - ls или если надо развернуто, то ls -la
$ ls

9) + Открыть любой txt файл - start название.файла (откроет файл в редакторе на компе) или vim название.файла (откроет 
файл прям в git - этот редактор используется в git по умолчанию)
$  vim 1.txt
10) + написать туда что-нибудь, любой текст. в вим - i 
11) + сохранить и выйти. - shift + Ж, :wq - сохранить и выйти в vim.
12) Выйти из папки на уровень выше - cd ..
$ cd ..
—
13) переместить любые 2 файла, которые вы создали, в любую другую папку. - mv название.файла путь/куда перемещаем
$ mv 1.txt 2.txt 3.txt /c/Users/Admin/222

14) скопировать любые 2 файла, которые вы создали, в любую другую папку.
$ cp /c/Users/Admin/111//4.json /c/Users/Admin/333

15) Найти файл по имени - find дирректория/ -name "*кусочек_названия_или_имя_без_расширения*"
$ find /c/Users/Admin/222/ -name *.txt

15+) Удалить файл - rm имя_файла
Удалить папку - rmdir имя_папки

16) просмотреть содержимое в реальном времени (команда grep) изучите как она работает.
Команда grep (расшифровывается как global regular expression print) - она даёт возможность пользователям сортировать
и фильтровать текст на основе сложных правил.
Синтаксис команды выглядит следующим образом:

$ grep [операторы] шаблон [имя файла...]

Или:

$ команда | grep [операторы] шаблон

Операторы - это дополнительные параметры, с помощью которых указываются различные настройки поиска и вывода, например количество строк или режим инверсии.
Шаблон - это любая строка или регулярное выражение, по которому будет вестись поиск
Файл и команда - это то место, где будет вестись поиск. Как вы увидите дальше, grep позволяет искать в нескольких файлах и даже в каталоге, используя рекурсивный режим.
найти слово в файле - grep "искомое_слово" имя_файла
$ grep "less" 1.txt

операторы после grep [opts] - например: $ grep -o "less" 1.txt

-v - вывести строки, где не всречается образец
-i - игнорировать регистр символов
-n - печатать номера строк
-a - искать по бинарным файлам
-e - расширенные регулярные выражения
-o - вывести только совпадающую с образцом часть строки
-b - показывать номер блока перед строкой;
-c - подсчитать количество вхождений шаблона;
-h - не выводить имя файла в результатах поиска внутри файлов Linux;
-l - отобразить только имена файлов, в которых найден шаблон;
-s - не показывать сообщения об ошибках;
-w - искать шаблон как слово, окружённое пробелами;
-An - показать вхождение и n строк до него;
-Bn - показать вхождение и n строк после него;
-Cn - показать n строк до и после вхождения;


17) вывести несколько первых строк из текстового файла - head -3 имя_файла (где -3 это количество первых строк)
$ head -3 1.txt

18) вывести несколько последних строк из текстового файла - tail -5 имя_файла (где -5 это количество строк)
$ tail -5 1.txt

19) просмотреть содержимое длинного файла (команда less) изучите как она работает.
Иногда текстовый файл слишком большой, и неудобно выводить его командой cat.
Тогда можно открыть его с помощью команды less: файл будет выводиться по частям,
доступна навигация по этим частям, поиск и прочий простой функционал.
$ less 1.txt
что бы закрыть файл выведенный в отдельной консоли - q

20) вывести дату и время - date  
Количество секунд, прошедших с 01/01/1970: date +%s 
Kоличество дней, прошедших с начала года:  date +%j
Ключ -u дает UTC время (Universal Coordinated Time -- время по Гринвичу). - date -u

21) Показать данные системы - uname -a (не забываем выйти в корень диска)
$ uname -a
=========

Задание *
1) Отправить http запрос на сервер: http://162.55.220.72:5005/terminal-hw-request. - curl адрес_сервера
$ curl http://162.55.220.72:5005/
ответ от сервера: 
 % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100    28  100    28    0     0    292      0 --:--:-- --:--:-- --:--:--   294Hello!!!!!!!!!тут был мой айпи

2) Написать скрипт который выполнит автоматически пункты 3, 4, 5, 6, 7, 8, 13 
создаем скрипт в файле и сохраняем:
string1=$(cd /e/111111/)
string2=$(mkdir 2 3 4)
string3=$(cd /e/111111/4/)
string4=$(touch 11.txt 22.json 33.json 44.txt 55.txt)
string5=$(mkdir -p 11/22/33)
string6=$(ls -la)
string7=$(mv *.json ./e/111111/11/22/33/)

активируем наш скрипт командой: $ chmod ugo+x имя_файла.тхт
запускаем скрипт ./имя_файла.тхт




                                                                                                      