Создать SSH ключ
в gitbash - $ ssh-keygen -t rsa -C  "Название_гитхаб_аккаунта" - enter
два раза энтер - пароль или два раза энтер
затем $ cat ~/.ssh/id_rsa.pub или $ vim ~/.ssh/id_rsa.pub 
скопировать ключ - перейти в аккаунт на GitHub

далее:
в аккаунте GitHub - Настройки - SSH & GPD keys - кнопка New SSH key - заполнить описание ключа, 
в большом поле вставить ключ - энтер - перейти в репозиторий  - зеленая кнопка CODE - выставить флаг на SSH
- нажать скопировать.
далее: 
в gitbash $ git config --global user.name "Наш_юзернейм"- enter 
$ git config --global user.email "Адрес_к которому_привязан_гитхаб " - enter
- войти в папку из которой будет далее вестись вся работа - 
$ git clone вставить_ссылку_которую_скопировали_на_GitHub
enter
ввести пароль от ключа если он есть
энтер 

Команды

git status -  показывает состояния файлов в рабочем каталоге и индексе: какие файлы изменены, 
но не добавлены в индекс; какие ожидают коммита в индексе. Вдобавок к этому выводятся подсказки о том, 
как изменить состояние файлов

git add - добавляет содержимое рабочего каталога в индекс (staging area) для последующего коммита. 
По умолчанию git commit использует лишь этот индекс, так что вы можете использовать git add для сборки 
слепка вашего следующего коммита.

git commit -  берёт все данные, добавленные в индекс с помощью git add, и сохраняет их слепок во внутренней 
базе данных, а затем сдвигает указатель текущей ветки на этот слепок. Использование опции -a для добавления 
всех изменений в индекс без использования git add, что может быть удобным в повседневном использовании, 
и -m для передачи сообщения коммита без запуска полноценного редактора.

git push - используется для установления связи с удалённым репозиторием, вычисления локальных изменений 
отсутствующих в нём, и собственно их передачи в вышеупомянутый репозиторий. Этой команде нужно право на 
запись в репозиторий, поэтому она использует аутентификацию.

git init - Чтобы превратить обычный каталог в Git репозиторий и начать версионировать файлы в нём, 
просто запустите git init.

.gitignore - Если у вас нет файла .gitignore, сначала используйте: $ touch .gitignore
затем эта команда добавит строки в ваш файл gitignore: $ echo 'application/cache' >> .gitignore
Будьте осторожны с новыми строками. Установка файла с именем .gitignore будет игнорировать файлы в этом каталоге 
и более глубокие каталоги, соответствующие шаблонам, содержащимся в файле. Наиболее распространенное 
использование - это просто иметь один такой файл на верхнем уровне. Но вы можете добавить другие вглубь своей 
структуры каталогов, чтобы игнорировать еще больше шаблонов или перестать игнорировать их для этого каталога, 
а затем и для более глубоких.

Аналогично, вы можете "unignore" определенные файлы в более глубокой структуре или определенном подмножество 
(т. Е. вы игнорируете *.log, но хотите по-прежнему отслеживать important.log), указав шаблоны, начинающиеся с ! .
например:  *.log !important.log
будет игнорировать все файлы журнала, но будет отслеживать файлы с именем important.log

Если вы отслеживаете файлы, которые вы собирались игнорировать, удалите их, добавьте шаблон в файл .gitignore 
и добавьте все изменения

# delete files that should be ignored, or untrack them with 
# git rm --cached <file list or pattern>

# stage all the changes git commit
git add -A 
отныне они не будут отслеживаться в вашем репозитории.

Если вы хотите очистить свою историю, вы можете

# if you want to correct the last 10 commits
git rebase -i --preserve-merges HEAD~10 
затем отметьте каждую фиксацию(коммит) e или edit . Сохраните план. Теперь git будет воспроизводиться ваша 
история останавливается на каждом коммите, отмеченном буквой е. Здесь вы удаляете файлы, которые вам не нужны, 
git add -A , а затем git rebase --continue , пока не закончите. Ваша история будет чистой. Убедитесь, 
что вы сказали своим коллегам, так как вам придется заставить их нажать, и им придется перебазировать то, 
что они еще не нажали.

git reset - как можно догадаться из названия, используется в основном для отмены изменений. Она изменяет 
указатель HEAD и, опционально, состояние индекса. Также эта команда может изменить файлы в рабочем каталоге 
при использовании параметра --hard, что может привести к потере наработок при неправильном использовании.
git reset --hard чтобы отменить слияние.

git pull - работает как комбинация команд git fetch и git merge, т. е. Git вначале забирает изменения из 
указанного удалённого репозитория, а затем пытается слить их с текущей веткой.

git checkout - используется для переключения веток и выгрузки их содержимого в рабочий каталог.

git merge -  используется для слияния одной или нескольких веток в текущую. Затем она устанавливает указатель 
текущей ветки на результирующий коммит. Практически все использования имеют вид git merge <branch> 
с указанием единственной ветки для слияния. Флаги для этой команды -Xignore-all-whitespace и --abort, 
используемый для отмены слияния в случае возникновения проблем.

git stash - используется для временного сохранения всех незафиксированных изменений с целью очистки рабочего 
каталога без необходимости фиксировать незавершённую работу в текущей ветке.

git cherry-pick - берёт изменения, вносимые одним коммитом, и пытается повторно применить их в виде нового 
коммита в текущей ветке. Эта возможность полезна в ситуации, когда нужно забрать парочку коммитов из другой 
ветки, а не сливать ветку целиком со всеми внесенными в нее изменениями.


Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON. - перейти на сайт github.com/Ваш_аккаунт/hometasks - нажать + в правом 
верхнем углу - выбрать New repository - написать название
 5. Клонировать репозиторий JSON на локальный компьютер. - $ git clone адрес_репозитория
 6. Внутри локального JSON создать файл “new.json”. - перейти в папку ввести команду $ touch new.json
 7. Добавить файл под гит. - $ git add new.json
 8. Закоммитить файл. - $ git commit -m "описание коммита"
 9. Отправить файл на внешний GitHub репозиторий. $ git push origin main
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество 
домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
 $ vim new.json (в файле указано: var jsonPerson = '{"name":"ANNA", "first name":"GOREVA", "pets":1, "salary": 500000}'

 11. Отправить изменения на внешний репозиторий. $ git add new.json; $git commit -m "one"; $ git push -u origin main;
 12. Создать файл preferences.json - $ touch preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, 
любимое время года, стрaна которую хотели бы посетить) в формате JSON.
var jsonPreferences = '{"favoritemovie":"SNATCH", "favoriteseries":"Downton abbey", "favoritefood":"beеf", "favoriteseason":"spring", "countrytrevel":"Qazakhstan"}'
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON - $ touch skills.json
var jsonSkills = '{"skill1":"basic theory", "skill2":"HTTP method", "skill3":"API testing", "skill4":"mobile testing", "skill5":"Postman testing", "skill6":"Charles & Fiddler", "skill7":"Devtools", "skill8":"VPN", "skill9":"iOS & Android - guideline", "skill10":"XCode", "skill11":"Android Studio", "skill12":"ADB","skill13":"Git & Gitbash", "skill14":"SQL", "skill15":"Jmeter", "skill16":"Scrum"}'
var jsonEtc = '{"etc":"https://ksendzov.com/"}'

 15. Отправить сразу 2 файла на внешний репозиторий. - $ git add preferences.json sklls.json; $git commit -m "3"; $ git push origin main
 16. На веб интерфейсе создать файл bug_report.json. - перейти в свой аккаунт Git в папку JSON - нажать Add file - выбрать new file - в строке названия назвать файл
     bug_report.json
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе. - нажать кнопку Commit changes в конце созданного нового файла
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON. - открыть в вебинтерфейсе нужный файл и вставиить туда текст:
var jsonBugreport = '{"Summary":"Короткое описание проблемы, явно указывающее на причину и тип бага", "Description":"шаги, окружение, полученный и ожидаемый результат", "Project":"Название тестируемого проекта", "Component":"Название части или функции тестируемого продукта", "Version":"версия продукта", "Severity":"Критичность", "Priority":"Приоритет", "Status":"Статус бага", "Attachment":"прикрепленный файл", "important":"автор бага, на кого назначен"}'
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе. - нажать на кнопку Commit changes в конце измененного файла
 20. Синхронизировать внешний и локальный репозиторий JSON - $ git fetch - проверяем изменения, $git status - проверяем статус, $git pull - синхронизируем изменения - синхронизация из gitbash


XML
 21. Создать внешний репозиторий c названием XML. - перейти на сайт github.com/Ваш_аккаунт/hometasks - нажать + в правом 
верхнем углу - выбрать New repository - написать название
 22. Клонировать репозиторий XML на локальный компьютер. - $ git clone адрес_репозитория
 23. Внутри локального XML создать файл “new.xml”. - $cd XML, $ touch new.xml
 24. Добавить файл под гит. - $ git add new.xml
 25. Закоммитить файл. - $ git commit -m "описание коммита"
 26. Отправить файл на внешний GitHub репозиторий. - $ git push -u origin main
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата).
 Всё написать в формате XML. - $ vim new.xml (в файле указано: <name>ANNA</name>, <firstname>GOREVA</firstname>, <pets>1</pets>, <salary>500000</salary>)
 28. Отправить изменения на внешний репозиторий. - $ git add new.xml; $git commit -m "one"; $ git push
 29. Создать файл preferences.xml - $ touch preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, стрaна которую
 хотели бы посетить) в формате XML. - <favoritemovie>SNATCH</favoritemovie>, <favoriteseries>Downton abbey</favoriteseries>, <favoritefood>beеf</favotitefood>, <favoriteseason>spring</favoriteseason>, <countrytrevel>Qazakhstan</Qazakhstan>
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML - $ touch skills.xml добавить информацию: 
   <skill1>basic theory</skill1> <skill2>HTTP method</skill2> <skill3>API testing</skill3> <skill4>mobile testing</skill4> <skill5>Postman testing</skill5> 
   <skill6>Charles & Fiddler</skill6> <skill7>Devtools</skill7> <skill8>VPN</skill8> <skill9>iOS & Android - guideline</skill9> <skill10>XCode</skill10> 
   <skill11>Android Studio</skill11> <skill12>ADB</skill12> <skill13>Git & Gitbash</skill13> <skill14>SQL</skill14> <skill15>Jmeter</skill15> <skill16>Scrum</skill16> <skill17>Web-testing</skill17> <etc>https://ksendzov.com/</etc>
 32. Сделать коммит в одну строку. - $ git add  preferences.xml  skills.xml, $ git commit -m "2"
 33. Отправить сразу 2 файла на внешний репозиторий. - $ git push
 34. На веб интерфейсе создать файл bug_report.xml. - перейти в свой аккаунт Git в папку XML - нажать Add file - выбрать new file - в строке названия назвать файл
     bug_report.xml
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе. - нажать кнопку Commit changes в конце созданного нового файла
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML. - открыть в вебинтерфейсе нужный файл и вставиить туда текст:
     <summary>Короткое описание проблемы, явно указывающее на причину и тип бага</summary> <description>шаги, окружение, полученный и ожидаемый результат</description>
     <project>Название тестируемого проекта</project> <component>Название части или функции тестируемого продукта</component> <version>версия продукта</version>
     <severity>Критичность</severity> <priority>Приоритет</priority> <status>Статус бага</status> <attachment>прикрепленный файл</attachment> <important>автор бага, на кого назначен</important>
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе. - нажать кнопку Commit changes в конце измененного файла
 38. Синхронизировать внешний и локальный репозиторий XML - $ git fetch - проверяем изменения, $git status - проверяем статус, $git pull - синхронизируем изменения - синхронизация из gitbash

TXT
 1. Создать внешний репозиторий c названием TXT.- перейти на сайт github.com/Ваш_аккаунт/hometasks - нажать + в правом 
верхнем углу - выбрать New repository - написать название
 2. Клонировать репозиторий TXT на локальный компьютер. -$ git clone адрес_репозитория
 3. Внутри локального TXT создать файл “new.txt”.- $cd TXT, $ touch new.txt
 4. Добавить файл под гит.- $ git add new.txt
 5. Закоммитить файл. - $ git commit -m "описание коммита"
 6. Отправить файл на внешний GitHub репозиторий. - $ git push -u origin main
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
    $ vim new.txt -  (ФИО, возраст, количество домашних животных, будущая желаемая зарплата)
8. Отправить изменения на внешний репозиторий.- $ git add new.txt; $git commit -m "one"; $ git push
 9. Создать файл preferences.txt - $ touch preferences.txt
 10. В файл preferences.txt” добавить информацию о своих предпочтениях - $ vim preferences.txt (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT - $ touch skills.txt (добавить инфу о скиллах)
 12. Сделать коммит в одну строку. - $ git add preferences.txt sklls.txt $ git commit -m "общий" 
 13. Отправить сразу 2 файла на внешний репозиторий. - $ git push
 14. На веб интерфейсе создать файл bug_report.txt. - перейти в свой аккаунт Git в папку ТХТ - нажать Add file - выбрать new file - в строке названия назвать файл
     bug_report.txt
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе. - нажать кнопку Commit changes в конце созданного нового файла
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT. - открыть нужный файл вставить туда заготовленный текст
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе. - нажать кнопку Commit changes в конце измененного файла
 18. Синхронизировать внешний и локальный репозиторий TXT - $ git fetch - проверяем изменения, $git status - проверяем статус, $git pull - синхронизируем изменения - синхронизация из gitbash